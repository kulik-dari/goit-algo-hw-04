"""
sorting_comparison.py - –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ë–ï–ó matplotlib

–¶–µ–π —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è —Å–∏—Å—Ç–µ–º, –¥–µ matplotlib –Ω–µ –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ 
–∞–±–æ –≤–∏–Ω–∏–∫–∞—é—Ç—å –ø—Ä–æ–±–ª–µ–º–∏ –∑ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, macOS –∑ externally-managed-environment).

–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:
- –ü–æ–≤–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
- –î–µ—Ç–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–∞ —Ç–∞–±–ª–∏—Ü—ñ
- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É CSV
- –ù–µ–∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –≤—ñ–¥ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫

–î–ª—è –≥—Ä–∞—Ñ—ñ—á–Ω–æ—ó –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ sorting_comparison_with_plots.py
"""

import timeit
import random
from typing import List
import csv

def insertion_sort(arr: List[int]) -> List[int]:
    """
    –ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–≤–∫–∞–º–∏.
    
    Args:
        arr: –°–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        
    Returns:
        –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
    """
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –≤—Ö—ñ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É, —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª
    arr = arr.copy()
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ –¥—Ä—É–≥–æ–≥–æ
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        # –ü–æ–∫–∏ –Ω–µ –¥—ñ–π—à–ª–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É —Å–ø–∏—Å–∫—É —ñ –ø–æ—Ç–æ—á–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –±—ñ–ª—å—à–∏–π –∑–∞ –∫–ª—é—á
        while j >= 0 and arr[j] > key:
            # –ó—Å—É–≤–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤–ø—Ä–∞–≤–æ
            arr[j + 1] = arr[j]
            j -= 1
        # –í—Å—Ç–∞–≤–ª—è—î–º–æ –∫–ª—é—á —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –ø–æ–∑–∏—Ü—ñ—é
        arr[j + 1] = key
        
    return arr

def merge_sort(arr: List[int]) -> List[int]:
    """
    –ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–ª–∏—Ç—Ç—è–º.
    
    Args:
        arr: –°–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        
    Returns:
        –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
    """
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –≤—Ö—ñ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É, —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª
    arr = arr.copy()
    
    # –ë–∞–∑–æ–≤–∏–π –≤–∏–ø–∞–¥–æ–∫: —è–∫—â–æ —Å–ø–∏—Å–æ–∫ –º–∞—î 1 –∞–±–æ 0 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, –≤—ñ–Ω –≤–∂–µ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π
    if len(arr) <= 1:
        return arr
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–µ—Ä–µ–¥–∏–Ω—É —Å–ø–∏—Å–∫—É
    mid = len(arr) // 2
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ä—Ç—É—î–º–æ –ª—ñ–≤—É —Ç–∞ –ø—Ä–∞–≤—É —á–∞—Å—Ç–∏–Ω–∏
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    
    # –û–±'—î–¥–Ω—É—î–º–æ –ª—ñ–≤—É —Ç–∞ –ø—Ä–∞–≤—É —á–∞—Å—Ç–∏–Ω–∏
    return merge(left, right)

def merge(left: List[int], right: List[int]) -> List[int]:
    """
    –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–ª–∏—Ç—Ç—è –¥–≤–æ—Ö –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤.
    
    Args:
        left: –ü–µ—Ä—à–∏–π –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
        right: –î—Ä—É–≥–∏–π –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
        
    Returns:
        –û–±'—î–¥–Ω–∞–Ω–∏–π –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
    """
    result = []
    i = j = 0
    
    # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –æ–±–æ—Ö —Å–ø–∏—Å–∫—ñ–≤ —ñ –¥–æ–¥–∞—î–º–æ –º–µ–Ω—à–∏–π –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    
    # –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏, —â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—è (—è–∫—â–æ —î)
    result.extend(left[i:])
    result.extend(right[j:])
    
    return result

def timsort(arr: List[int]) -> List[int]:
    """
    –í–±—É–¥–æ–≤–∞–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è Python (Timsort).
    
    Args:
        arr: –°–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        
    Returns:
        –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
    """
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –≤—Ö—ñ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É, —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª
    arr = arr.copy()
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–±—É–¥–æ–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥ sorted()
    return sorted(arr)

def generate_data(size: int, data_type: str = "random") -> List[int]:
    """
    –ì–µ–Ω–µ—Ä—É—î —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤.
    
    Args:
        size: –†–æ–∑–º—ñ—Ä —Å–ø–∏—Å–∫—É
        data_type: –¢–∏–ø –¥–∞–Ω–∏—Ö ("random", "sorted", "reversed", "partially_sorted")
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª
    """
    if data_type == "random":
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
        return [random.randint(0, 1000000) for _ in range(size)]
    elif data_type == "sorted":
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
        return list(range(size))
    elif data_type == "reversed":
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
        return list(range(size, 0, -1))
    elif data_type == "partially_sorted":
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —á–∞—Å—Ç–∫–æ–≤–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
        arr = list(range(size))
        # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ ~25% –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        for _ in range(size // 4):
            i, j = random.randint(0, size-1), random.randint(0, size-1)
            arr[i], arr[j] = arr[j], arr[i]
        return arr
    else:
        raise ValueError(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö: {data_type}")

def measure_time(func, data, runs=3):
    """
    –í–∏–º—ñ—Ä—é—î —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó.
    
    Args:
        func: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
        data: –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
        runs: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫—ñ–≤ –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è
        
    Returns:
        –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    """
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ timeit –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É
    total_time = timeit.timeit(lambda: func(data), number=runs)
    return total_time / runs

def compare_sorting_algorithms(sizes, data_types):
    """
    –ü–æ—Ä—ñ–≤–Ω—é—î –∞–ª–≥–æ—Ä–∏—Ç–º–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø–∞—Ö –¥–∞–Ω–∏—Ö.
    
    Args:
        sizes: –°–ø–∏—Å–æ–∫ —Ä–æ–∑–º—ñ—Ä—ñ–≤ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        data_types: –°–ø–∏—Å–æ–∫ —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö
        
    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    results = {data_type: {"insertion": [], "merge": [], "timsort": []} for data_type in data_types}
    
    print("üîÑ –ü–æ—á–∞—Ç–æ–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è...")
    print("=" * 60)
    
    for size in sizes:
        print(f"\nüìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑–º—ñ—Ä—É {size:,} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤:")
        print("-" * 45)
        
        for data_type in data_types:
            data = generate_data(size, data_type)
            
            print(f"  üìà –¢–∏–ø –¥–∞–Ω–∏—Ö: {data_type}")
            
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–≤–∫–∞–º–∏ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –º–∞—Å–∏–≤—ñ–≤ (–Ω–∞–¥—Ç–æ –ø–æ–≤—ñ–ª—å–Ω–æ)
            if size <= 10000:
                print("    ‚è±Ô∏è  –í–∏–º—ñ—Ä—é—î–º–æ insertion sort...", end=" ")
                insertion_time = measure_time(insertion_sort, data)
                results[data_type]["insertion"].append(insertion_time)
                print(f"{insertion_time:.6f}s")
            else:
                results[data_type]["insertion"].append(None)
                print("    ‚è±Ô∏è  Insertion sort –ø—Ä–æ–ø—É—â–µ–Ω–æ (–∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π —Ä–æ–∑–º—ñ—Ä)")
            
            print("    ‚è±Ô∏è  –í–∏–º—ñ—Ä—é—î–º–æ merge sort...", end=" ")
            merge_time = measure_time(merge_sort, data)
            results[data_type]["merge"].append(merge_time)
            print(f"{merge_time:.6f}s")
            
            print("    ‚è±Ô∏è  –í–∏–º—ñ—Ä—é—î–º–æ timsort...", end=" ")
            timsort_time = measure_time(timsort, data)
            results[data_type]["timsort"].append(timsort_time)
            print(f"{timsort_time:.6f}s")
    
    return results, sizes

def print_results_table(results, sizes, data_types):
    """
    –í–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ.
    
    Args:
        results: –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        sizes: –°–ø–∏—Å–æ–∫ —Ä–æ–∑–º—ñ—Ä—ñ–≤
        data_types: –°–ø–∏—Å–æ–∫ —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö
    """
    print("\n" + "="*80)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ê–õ–ì–û–†–ò–¢–ú–Ü–í –°–û–†–¢–£–í–ê–ù–ù–Ø")
    print("="*80)
    
    for data_type in data_types:
        print(f"\nüî∏ {data_type.upper()} –î–ê–ù–Ü:")
        print("-" * 70)
        print(f"{'–†–æ–∑–º—ñ—Ä':<10} {'Insertion':<12} {'Merge':<12} {'Timsort':<12} {'–ù–∞–π–∫—Ä–∞—â–∏–π':<15}")
        print("-" * 70)
        
        for i, size in enumerate(sizes):
            insertion_time = results[data_type]["insertion"][i]
            merge_time = results[data_type]["merge"][i]
            timsort_time = results[data_type]["timsort"][i]
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
            times = []
            if insertion_time is not None:
                times.append(("Insertion", insertion_time))
            times.append(("Merge", merge_time))
            times.append(("Timsort", timsort_time))
            
            best_algo, best_time = min(times, key=lambda x: x[1])
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            insertion_str = f"{insertion_time:.6f}s" if insertion_time else "N/A"
            merge_str = f"{merge_time:.6f}s"
            timsort_str = f"{timsort_time:.6f}s"
            
            print(f"{size:<10,} {insertion_str:<12} {merge_str:<12} {timsort_str:<12} {best_algo:<15}")

def analyze_performance(results, sizes, data_types):
    """
    –ê–Ω–∞–ª—ñ–∑—É—î –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤.
    
    Args:
        results: –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        sizes: –°–ø–∏—Å–æ–∫ —Ä–æ–∑–º—ñ—Ä—ñ–≤
        data_types: –°–ø–∏—Å–æ–∫ —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö
    """
    print(f"\n" + "="*80)
    print("üî¨ –ê–ù–ê–õ–Ü–ó –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü")
    print("="*80)
    
    for data_type in data_types:
        print(f"\nüìä –ê–Ω–∞–ª—ñ–∑ –¥–ª—è {data_type} –¥–∞–Ω–∏—Ö:")
        print("-" * 50)
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
        merge_times = results[data_type]["merge"]
        timsort_times = results[data_type]["timsort"]
        
        print("üöÄ –®–≤–∏–¥–∫—ñ—Å—Ç—å Timsort vs Merge Sort:")
        for i, size in enumerate(sizes):
            if i < len(merge_times) and i < len(timsort_times):
                speedup = merge_times[i] / timsort_times[i]
                print(f"   –†–æ–∑–º—ñ—Ä {size:,}: Timsort —à–≤–∏–¥—à–∏–π —É {speedup:.2f} —Ä–∞–∑—ñ–≤")
        
        # –ê–Ω–∞–ª—ñ–∑ –¥–ª—è insertion sort (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–∞–ª–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤)
        insertion_times = [t for t in results[data_type]["insertion"] if t is not None]
        if insertion_times:
            print("\n‚ö° Insertion Sort (–º–∞–ª—ñ —Ä–æ–∑–º—ñ—Ä–∏):")
            valid_sizes = sizes[:len(insertion_times)]
            for i, (size, time) in enumerate(zip(valid_sizes, insertion_times)):
                timsort_time = timsort_times[i]
                if data_type == "sorted":
                    comparison = "—à–≤–∏–¥—à–∏–π" if time < timsort_time else "–ø–æ–≤—ñ–ª—å–Ω—ñ—à–∏–π"
                    ratio = max(time, timsort_time) / min(time, timsort_time)
                    print(f"   –†–æ–∑–º—ñ—Ä {size:,}: Insertion Sort {comparison} —É {ratio:.2f} —Ä–∞–∑—ñ–≤")

def save_results_to_csv(results, sizes, data_types, filename="sorting_results.csv"):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É CSV —Ñ–∞–π–ª.
    
    Args:
        results: –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        sizes: –°–ø–∏—Å–æ–∫ —Ä–æ–∑–º—ñ—Ä—ñ–≤
        data_types: –°–ø–∏—Å–æ–∫ —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö
        filename: –Ü–º'—è —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    """
    with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['data_type', 'size', 'insertion_sort', 'merge_sort', 'timsort']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        
        writer.writeheader()
        for data_type in data_types:
            for i, size in enumerate(sizes):
                writer.writerow({
                    'data_type': data_type,
                    'size': size,
                    'insertion_sort': results[data_type]["insertion"][i],
                    'merge_sort': results[data_type]["merge"][i],
                    'timsort': results[data_type]["timsort"][i]
                })
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: {filename}")

def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏.
    """
    print("üî¨" + "="*58 + "üî¨")
    print("üî¨  –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ê–õ–ì–û–†–ò–¢–ú–Ü–í –°–û–†–¢–£–í–ê–ù–ù–Ø (–ë–ï–ó MATPLOTLIB)  üî¨")
    print("üî¨" + "="*58 + "üî¨")
    print("üìã –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: Insertion Sort, Merge Sort, Timsort")
    print("üìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø–∞—Ö —Ç–∞ —Ä–æ–∑–º—ñ—Ä–∞—Ö –¥–∞–Ω–∏—Ö")
    print("‚è±Ô∏è  –í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–æ–¥—É–ª—è timeit")
    print("="*62)
    
    # –†–æ–∑–º—ñ—Ä–∏ —Å–ø–∏—Å–∫—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    sizes = [100, 500, 1000, 5000, 10000, 50000, 100000]
    
    # –¢–∏–ø–∏ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    data_types = ["random", "sorted", "reversed", "partially_sorted"]
    
    print(f"üìã –†–æ–∑–º—ñ—Ä–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {', '.join(map(str, sizes))}")
    print(f"üìä –¢–∏–ø–∏ –¥–∞–Ω–∏—Ö: {', '.join(data_types)}")
    
    # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∏
    results, sizes = compare_sorting_algorithms(sizes, data_types)
    
    # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ
    print_results_table(results, sizes, data_types)
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
    analyze_performance(results, sizes, data_types)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É CSV
    save_results_to_csv(results, sizes, data_types)
    
    # –í–∏–≤–æ–¥–∏–º–æ –≤–∏—Å–Ω–æ–≤–∫–∏
    print(f"\n" + "="*80)
    print("üìù –ì–û–õ–û–í–ù–Ü –í–ò–°–ù–û–í–ö–ò")
    print("="*80)
    print("""
üéØ 1. TIMSORT –ü–ï–†–ï–í–ê–ñ–ê–Ñ –í–°–Ü –Ü–ù–®–Ü –ê–õ–ì–û–†–ò–¢–ú–ò:
   ‚Ä¢ –ü–æ–∫–∞–∑—É—î –Ω–∞–π–∫—Ä–∞—â—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–∞ –≤—Å—ñ—Ö —Ç–∏–ø–∞—Ö –¥–∞–Ω–∏—Ö
   ‚Ä¢ –û—Å–æ–±–ª–∏–≤–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –¥–ª—è –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Ç–∞ —á–∞—Å—Ç–∫–æ–≤–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
   ‚Ä¢ –ê–¥–∞–ø—Ç—É—î—Ç—å—Å—è –¥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –≤–∂–µ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –¥—ñ–ª—è–Ω–∫–∏

‚ö° 2. INSERTION SORT - –î–û–ë–†–ò–ô –î–õ–Ø –ú–ê–õ–ò–• –î–ê–ù–ò–•:
   ‚Ä¢ –ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –¥–ª—è —Å–ø–∏—Å–∫—ñ–≤ –¥–æ 1000 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
   ‚Ä¢ –ú–∞—î –ª—ñ–Ω—ñ–π–Ω—É —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å O(n) –¥–ª—è –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
   ‚Ä¢ –°—Ç–∞—î –Ω–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–º –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö —Å–ø–∏—Å–∫—ñ–≤ (–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å)

üîÑ 3. MERGE SORT - –°–¢–ê–ë–Ü–õ–¨–ù–ò–ô –¢–ê –ü–ï–†–ï–î–ë–ê–ß–£–í–ê–ù–ò–ô:
   ‚Ä¢ –ó–∞–≤–∂–¥–∏ O(n log n), –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö
   ‚Ä¢ –ü—Ä–æ–≥—Ä–∞—î Timsort —É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
   ‚Ä¢ –•–æ—Ä–æ—à–∏–π –≤–∏–±—ñ—Ä, –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å

üèÜ 4. –ß–û–ú–£ TIMSORT –¢–ê–ö –ï–§–ï–ö–¢–ò–í–ù–ò–ô:
   ‚Ä¢ –ì—ñ–±—Ä–∏–¥–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥: –ø–æ—î–¥–Ω—É—î insertion sort + merge sort
   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î insertion sort –¥–ª—è –º–∞–ª–∏—Ö –¥—ñ–ª—è–Ω–æ–∫
   ‚Ä¢ –í–∏—è–≤–ª—è—î —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—Ä–∏—Ä–æ–¥–Ω—ñ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ —É –¥–∞–Ω–∏—Ö
   ‚Ä¢ –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö, —è–∫—ñ —á–∞—Å—Ç–æ —á–∞—Å—Ç–∫–æ–≤–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ

üí° 5. –ü–†–ê–ö–¢–ò–ß–ù–Ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:
   ‚Ä¢ –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ sorted() –∞–±–æ .sort() —É Python
   ‚Ä¢ –ù–µ —Ä–µ–∞–ª—ñ–∑–æ–≤—É–π—Ç–µ –≤–ª–∞—Å–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
   ‚Ä¢ Timsort –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Ä–æ–∫–∞–º–∏ —Ä–æ–∑—Ä–æ–±–∫–∏ —Ç–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
   ‚Ä¢ –í–±—É–¥–æ–≤–∞–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ Python - –Ω–∞–π–∫—Ä–∞—â–∏–π –≤–∏–±—ñ—Ä –¥–ª—è –±—ñ–ª—å—à–æ—Å—Ç—ñ –∑–∞–¥–∞—á
    """)
    
    print("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É sorting_results.csv")

if __name__ == "__main__":
    main()
