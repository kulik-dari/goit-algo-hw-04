"""
sorting_comparison_with_plots.py - –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ó matplotlib

–¶–µ–π —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤–Ω—É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é –∑ –≥—Ä–∞—Ñ—ñ—á–Ω–æ—é –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—î—é.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü–µ–π —Ñ–∞–π–ª, —è–∫—â–æ —É –≤–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ matplotlib.

–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è matplotlib:
pip3 install matplotlib
–∞–±–æ
python3 -m venv venv && source venv/bin/activate && pip install matplotlib
"""

import timeit
import random
import matplotlib.pyplot as plt
import numpy as np
from typing import List
import csv

def insertion_sort(arr: List[int]) -> List[int]:
    """
    –ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–≤–∫–∞–º–∏.
    
    Args:
        arr: –°–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        
    Returns:
        –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
    """
    arr = arr.copy()
    
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
        
    return arr

def merge_sort(arr: List[int]) -> List[int]:
    """
    –ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–ª–∏—Ç—Ç—è–º.
    
    Args:
        arr: –°–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        
    Returns:
        –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
    """
    arr = arr.copy()
    
    if len(arr) <= 1:
        return arr
    
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    
    return merge(left, right)

def merge(left: List[int], right: List[int]) -> List[int]:
    """
    –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–ª–∏—Ç—Ç—è –¥–≤–æ—Ö –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤.
    """
    result = []
    i = j = 0
    
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    
    result.extend(left[i:])
    result.extend(right[j:])
    
    return result

def timsort(arr: List[int]) -> List[int]:
    """
    –í–±—É–¥–æ–≤–∞–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è Python (Timsort).
    """
    return sorted(arr.copy())

def generate_data(size: int, data_type: str = "random") -> List[int]:
    """
    –ì–µ–Ω–µ—Ä—É—î —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤.
    """
    if data_type == "random":
        return [random.randint(0, 1000000) for _ in range(size)]
    elif data_type == "sorted":
        return list(range(size))
    elif data_type == "reversed":
        return list(range(size, 0, -1))
    elif data_type == "partially_sorted":
        arr = list(range(size))
        for _ in range(size // 4):
            i, j = random.randint(0, size-1), random.randint(0, size-1)
            arr[i], arr[j] = arr[j], arr[i]
        return arr
    else:
        raise ValueError(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö: {data_type}")

def measure_time(func, data, runs=3):
    """
    –í–∏–º—ñ—Ä—é—î —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó.
    """
    total_time = timeit.timeit(lambda: func(data), number=runs)
    return total_time / runs

def compare_sorting_algorithms(sizes, data_types):
    """
    –ü–æ—Ä—ñ–≤–Ω—é—î –∞–ª–≥–æ—Ä–∏—Ç–º–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø–∞—Ö –¥–∞–Ω–∏—Ö.
    """
    results = {data_type: {"insertion": [], "merge": [], "timsort": []} for data_type in data_types}
    
    print("üîÑ –ü–æ—á–∞—Ç–æ–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è...")
    print("=" * 60)
    
    for size in sizes:
        print(f"\nüìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑–º—ñ—Ä—É {size:,} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤:")
        
        for data_type in data_types:
            data = generate_data(size, data_type)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–≤–∫–∞–º–∏ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –º–∞—Å–∏–≤—ñ–≤
            if size <= 10000:
                insertion_time = measure_time(insertion_sort, data)
                results[data_type]["insertion"].append(insertion_time)
            else:
                results[data_type]["insertion"].append(None)
            
            merge_time = measure_time(merge_sort, data)
            results[data_type]["merge"].append(merge_time)
            
            timsort_time = measure_time(timsort, data)
            results[data_type]["timsort"].append(timsort_time)
            
            print(f"  {data_type}: merge={merge_time:.6f}s, timsort={timsort_time:.6f}s")
    
    return results, sizes

def plot_results(results, sizes, data_types):
    """
    –°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ—á–Ω—É –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.
    """
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    axes = axes.flatten()
    
    colors = {
        'insertion': '#FF6B6B',  # –ß–µ—Ä–≤–æ–Ω–∏–π
        'merge': '#4ECDC4',      # –ë—ñ—Ä—é–∑–æ–≤–∏–π
        'timsort': '#45B7D1'     # –°–∏–Ω—ñ–π
    }
    
    for i, data_type in enumerate(data_types):
        ax = axes[i]
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ None –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–≤–∫–∞–º–∏
        valid_sizes_insertion = [s for j, s in enumerate(sizes) if results[data_type]["insertion"][j] is not None]
        valid_times_insertion = [t for t in results[data_type]["insertion"] if t is not None]
        
        # –ú–∞–ª—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫–∏
        if valid_sizes_insertion:
            ax.plot(valid_sizes_insertion, valid_times_insertion, 'o-', 
                   label="Insertion Sort", color=colors['insertion'], linewidth=2, markersize=6)
        
        ax.plot(sizes, results[data_type]["merge"], 'o-', 
               label="Merge Sort", color=colors['merge'], linewidth=2, markersize=6)
        
        ax.plot(sizes, results[data_type]["timsort"], 'o-', 
               label="Timsort", color=colors['timsort'], linewidth=2, markersize=6)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
        ax.set_title(f'–ß–∞—Å —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è {data_type} –¥–∞–Ω–∏—Ö', fontsize=14, fontweight='bold')
        ax.set_xlabel("–†–æ–∑–º—ñ—Ä —Å–ø–∏—Å–∫—É", fontsize=12)
        ax.set_ylabel("–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–µ–∫—É–Ω–¥–∏)", fontsize=12)
        ax.legend(fontsize=10)
        ax.grid(True, alpha=0.3)
        ax.set_yscale('log')  # –õ–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω–∞ —à–∫–∞–ª–∞ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        
        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –æ—Å–µ–π
        ax.ticklabel_format(style='plain', axis='x')
        
        # –î–æ–¥–∞—î–º–æ –∞–Ω–æ—Ç–∞—Ü—ñ—ó –¥–ª—è –Ω–∞–π–∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        timsort_times = results[data_type]["timsort"]
        min_time_idx = timsort_times.index(min(timsort_times))
        ax.annotate(f'–ù–∞–π–∫—Ä–∞—â–∏–π: {min(timsort_times):.6f}s', 
                   xy=(sizes[min_time_idx], min(timsort_times)),
                   xytext=(10, 10), textcoords='offset points',
                   bbox=dict(boxstyle='round,pad=0.3', facecolor='yellow', alpha=0.7),
                   fontsize=8)
    
    plt.tight_layout(pad=3.0)
    plt.savefig("sorting_comparison_with_plots.png", dpi=300, bbox_inches='tight')
    plt.show()
    
    print(f"\nüìä –ì—Ä–∞—Ñ—ñ–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: sorting_comparison_with_plots.png")

def create_comparison_chart(results, sizes, data_types):
    """
    –°—Ç–≤–æ—Ä—é—î –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ.
    """
    fig, ax = plt.subplots(1, 1, figsize=(12, 8))
    
    # –û–±—á–∏—Å–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π speedup Timsort vs Merge Sort
    speedups = []
    labels = []
    
    for data_type in data_types:
        merge_times = results[data_type]["merge"]
        timsort_times = results[data_type]["timsort"]
        
        avg_speedup = np.mean([m/t for m, t in zip(merge_times, timsort_times)])
        speedups.append(avg_speedup)
        labels.append(data_type.replace('_', ' ').title())
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–æ–≤–ø—á–∞—Å—Ç—É –¥—ñ–∞–≥—Ä–∞–º—É
    bars = ax.bar(labels, speedups, color=['#FF9999', '#66B2FF', '#99FF99', '#FFCC99'])
    
    # –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ–≤–ø—á–∏–∫–∏
    for bar, speedup in zip(bars, speedups):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 0.05,
                f'{speedup:.2f}x', ha='center', va='bottom', fontweight='bold')
    
    ax.set_title('–°–µ—Ä–µ–¥–Ω—î –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è Timsort –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ Merge Sort', 
                fontsize=16, fontweight='bold', pad=20)
    ax.set_ylabel('–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è', fontsize=12)
    ax.set_xlabel('–¢–∏–ø –¥–∞–Ω–∏—Ö', fontsize=12)
    ax.grid(True, alpha=0.3, axis='y')
    
    # –î–æ–¥–∞—î–º–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É –ª—ñ–Ω—ñ—é –Ω–∞ —Ä—ñ–≤–Ω—ñ 1.0
    ax.axhline(y=1, color='red', linestyle='--', alpha=0.7, label='–û–¥–Ω–∞–∫–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å')
    ax.legend()
    
    plt.tight_layout()
    plt.savefig("timsort_speedup_comparison.png", dpi=300, bbox_inches='tight')
    plt.show()
    
    print(f"üìà –ì—Ä–∞—Ñ—ñ–∫ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: timsort_speedup_comparison.png")

def save_results_to_csv(results, sizes, data_types, filename="sorting_results.csv"):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É CSV —Ñ–∞–π–ª.
    """
    with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['data_type', 'size', 'insertion_sort', 'merge_sort', 'timsort']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        
        writer.writeheader()
        for data_type in data_types:
            for i, size in enumerate(sizes):
                writer.writerow({
                    'data_type': data_type,
                    'size': size,
                    'insertion_sort': results[data_type]["insertion"][i],
                    'merge_sort': results[data_type]["merge"][i],
                    'timsort': results[data_type]["timsort"][i]
                })
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: {filename}")

def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏.
    """
    print("üìä" + "="*58 + "üìä")
    print("üìä  –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ê–õ–ì–û–†–ò–¢–ú–Ü–í –°–û–†–¢–£–í–ê–ù–ù–Ø (–ó MATPLOTLIB)  üìä")
    print("üìä" + "="*58 + "üìä")
    print("üéØ –ü–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑ –≥—Ä–∞—Ñ—ñ—á–Ω–æ—é –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—î—é")
    print("üìà –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ —Ç–∞ –¥—ñ–∞–≥—Ä–∞–º")
    print("="*62)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ matplotlib
    try:
        import matplotlib.pyplot as plt
        print("‚úÖ Matplotlib –¥–æ—Å—Ç—É–ø–Ω–∏–π - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–≤–Ω—É –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—é")
    except ImportError:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: matplotlib –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é: pip3 install matplotlib")
        return
    
    # –†–æ–∑–º—ñ—Ä–∏ —Ç–∞ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö
    sizes = [100, 500, 1000, 5000, 10000, 50000, 100000]
    data_types = ["random", "sorted", "reversed", "partially_sorted"]
    
    print(f"üìã –†–æ–∑–º—ñ—Ä–∏: {', '.join(map(str, sizes))}")
    print(f"üìä –¢–∏–ø–∏ –¥–∞–Ω–∏—Ö: {', '.join(data_types)}")
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    results, sizes = compare_sorting_algorithms(sizes, data_types)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
    plot_results(results, sizes, data_types)
    create_comparison_chart(results, sizes, data_types)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
    save_results_to_csv(results, sizes, data_types)
    
    # –í–∏—Å–Ω–æ–≤–∫–∏
    print(f"\nüéØ –ü–Ü–î–°–£–ú–ö–ò:")
    print("‚úÖ –ì—Ä–∞—Ñ—ñ–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
    print("‚úÖ –î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É CSV")
    print("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    print(f"\nüìÅ –°—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏:")
    print("  ‚Ä¢ sorting_comparison_with_plots.png - –æ—Å–Ω–æ–≤–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∏")
    print("  ‚Ä¢ timsort_speedup_comparison.png - –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ")
    print("  ‚Ä¢ sorting_results.csv - —Å–∏—Ä—ñ –¥–∞–Ω—ñ")

if __name__ == "__main__":
    main()
